import Subscription from '../models/subscription.model.js'
import { workflowClient } from '../config/upstash.js'
import { SERVER_URL } from '../config/env.js'

export const createSubscription = async (req, res, next) => {
    try {
        const subscription = await Subscription.create({
            ...req.body, // this is a spread operator, copies all enum own properties
            user: req.user._id, // this the user id associated with this subscription we have access to this because our auth middleware added this to our request before being passed here
        });

        const { workflowRunId } = await workflowClient.trigger({ // This function returns a workflowId
            url: `${SERVER_URL}/api/v1/workflows/subscription/reminder`,
            body: {
                // when the reminder is sent, this allows the reminder to understand which subscription it's talking about
                subscriptionId: subscription.id, // we created an object with the subscription variable. Here we call the object's id that was generated by mongo
            },
            headers: {
                'content-type': 'application/json', // tells the upstash that we are sending in json format
            },
            retries: 0, //if it fails it retries. here we dont do anything
        })
        res.status(201).json({ success: true, data: { subscription, workflowRunId } }); // if it works, we return true, and return the workflowId
    } catch (e) {
        next(e); //sends to error middleware
    }
}

export const getUserSubscriptions = async (req, res, next) => {
    try {
        // Check if the user is the same as the one in the request. The userid that is being used in the path is it the same as the user id that is in the request
        if(req.user.id !== req.params.id) {  // if not the same we throw an error
            const error = new Error('You are not the owner of this account');
            error.status = 401;
            throw error;
        }

        // if they match, we find the user's subscriptions using their user id since it is referenced using the Subscription model
        const subscriptions = await Subscription.find({ user: req.params.id });

        res.status(200).json({ success: true, data: subscriptions }); // return a success tag with the subscriptions a user has.
    } catch (e) {
        next(e); //sends to error middleware
    }
}